name: üõ°Ô∏è Security Audit & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  security-headers-test:
    name: Security Headers Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test Security Headers
        run: |
          # Test CloudFront security headers configuration using curl
          echo "Testing security headers on production domains..."
          
          # Define expected headers (excluding COOP, COEP, and Permissions-Policy for Stripe/iframe compatibility)
          EXPECTED_HEADERS=(
            "Content-Security-Policy"
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Strict-Transport-Security"
            "Referrer-Policy"
          )
          
          # Test each domain (would need to be deployed first)
          DOMAINS=("askjds.com" "jdsimplified.com" "admin.jdsimplified.com")
          
          for domain in "${DOMAINS[@]}"; do
            echo "Testing headers for $domain"
            for header in "${EXPECTED_HEADERS[@]}"; do
              if curl -s -I "https://$domain" | grep -i "$header"; then
                echo "‚úÖ $header found on $domain"
              else
                echo "‚ùå $header missing on $domain"
                exit 1
              fi
            done
          done
          
          # Note about intentionally omitted headers
          echo ""
          echo "‚ÑπÔ∏è  Cross-Origin-Opener-Policy, Cross-Origin-Embedder-Policy, and Permissions-Policy are intentionally omitted for Stripe.js/iframe compatibility"
          echo "‚úÖ All required security headers validated successfully"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          # Fail on high and critical vulnerabilities
          npm audit --audit-level high
          
          # Generate detailed report
          npm audit --json > audit-report.json
          
          # Check for specific vulnerability types
          CRITICAL_COUNT=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found!"
            exit 1
          fi
          
          echo "‚úÖ No critical or high vulnerabilities found"

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json

  lighthouse-security:
    name: Lighthouse Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @lhci/cli@0.12.x

      - name: Build application
        run: npm run build

      - name: Verify build output
        run: |
          echo "=== Build Output Structure ==="
          ls -la dist/
          echo ""
          echo "=== Index.html content (first 20 lines) ==="
          head -20 dist/index.html || echo "No index.html found"
          echo ""
          echo "=== Static assets ==="
          find dist/ -name "*.js" -o -name "*.css" | head -10

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Start SPA server and verify
        run: |
          echo "Starting server on port 4173..."
          
          # Check what serve command is available
          echo "=== Checking serve command ==="
          npx serve --help || echo "serve help failed"
          
          # First try: Simple serve command without host binding
          echo "Attempting simple serve command..."
          nohup npx serve -s dist -l 4173 > server.log 2>&1 &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          sleep 5
          
          # Check if process is running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚úÖ serve process is running"
          else
            echo "‚ùå serve process died, checking logs..."
            cat server.log
            
            # Try http-server as backup
            echo "Trying http-server instead..."
            npm install -g http-server
            nohup http-server dist -p 4173 --spa > server.log 2>&1 &
            SERVER_PID=$!
            sleep 5
          fi
          
          # Show server logs
          echo "=== Server Logs ==="
          cat server.log || echo "No server logs found"
          
          # Check port binding
          echo "=== Port Status ==="
          netstat -ln | grep :4173 || echo "Port 4173 not bound"
          
          # Test server with timeout
          echo "Testing server connectivity..."
          timeout 10s curl -v http://localhost:4173/ || echo "Server connection failed"
          
          # If server still not working, ensure we have a proper SPA server
          if ! curl -sSf http://localhost:4173/ > /dev/null 2>&1; then
            echo "Primary servers failed, ensuring SPA-capable server..."
            pkill -f "serve\|http-server\|python.*4173" || true
            
            # Force install serve and use explicit SPA mode
            npm install -g serve
            echo "Starting serve with explicit SPA routing..."
            nohup npx serve -s dist -l 4173 > server.log 2>&1 &
            SERVER_PID=$!
            sleep 5
            
            # If serve still fails, use http-server which has better SPA support
            if ! curl -sSf http://localhost:4173/ > /dev/null 2>&1; then
              echo "serve failed, using http-server with SPA support..."
              pkill -f "serve" || true
              npm install -g http-server
              nohup http-server dist -p 4173 --spa --cors > server.log 2>&1 &
              SERVER_PID=$!
              sleep 5
            fi
          fi
          
          # Final connectivity test
          echo "=== Final Connectivity Test ==="
          for i in {1..10}; do
            if curl -sSf http://localhost:4173/ > /dev/null 2>&1; then
              echo "‚úÖ Server is responding on attempt $i"
              break
            fi
            echo "Attempt $i/10: Server not ready..."
            sleep 2
          done
          
          # Test routes and content
          echo "=== Testing Routes and Content ==="
          echo "Root route headers:"
          curl -I http://localhost:4173/ 2>&1 | head -3
          
          echo "Root route content (first 10 lines):"
          curl -s http://localhost:4173/ | head -10
          
          echo "Chat route headers:"
          curl -I http://localhost:4173/chat 2>&1 | head -3
          
          echo "Courses route headers:"
          curl -I http://localhost:4173/courses 2>&1 | head -3
          
          # Verify SPA routing works (all routes should return same content)
          echo "=== SPA Routing Verification ==="
          ROOT_CONTENT=$(curl -s http://localhost:4173/ | head -5)
          CHAT_CONTENT=$(curl -s http://localhost:4173/chat | head -5)
          
          if [ "$ROOT_CONTENT" = "$CHAT_CONTENT" ]; then
            echo "‚úÖ SPA routing working correctly"
          else
            echo "‚ùå SPA routing not working - routes return different content"
            echo "Root content: $ROOT_CONTENT"
            echo "Chat content: $CHAT_CONTENT"
          fi

      - name: Run Lighthouse CI with simplified approach
        run: |
          echo "Running simplified Lighthouse CI..."
          
          # Final server check
          if ! curl -sSf http://localhost:4173/ > /dev/null 2>&1; then
            echo "‚ùå Server is not responding, cannot run Lighthouse"
            exit 1
          fi
          
          echo "‚úÖ Server is responding, starting Lighthouse..."
          
          # Verify content exists before Lighthouse
          echo "=== Pre-Lighthouse Content Check ==="
          CONTENT=$(curl -s http://localhost:4173/)
          if echo "$CONTENT" | grep -q "<title>"; then
            echo "‚úÖ Page has title tag"
          else
            echo "‚ùå Page missing title tag"
          fi
          
          if echo "$CONTENT" | grep -q "<div.*id=.root"; then
            echo "‚úÖ Page has React root element"
          else
            echo "‚ùå Page missing React root element"
          fi
          
          # Run Lighthouse with security-focused configuration
          echo "=== Running Lighthouse Security Audit ==="
          
          # Create a custom Lighthouse config for security audits only
          cat > lighthouse-security-config.js << 'EOF'
          module.exports = {
            extends: 'lighthouse:default',
            settings: {
              onlyCategories: ['best-practices'],
              skipAudits: [
                'first-contentful-paint',
                'largest-contentful-paint', 
                'first-meaningful-paint',
                'speed-index',
                'cumulative-layout-shift',
                'total-blocking-time',
                'max-potential-fid',
                'interactive',
                'screenshot-thumbnails',
                'final-screenshot'
              ]
            },
            audits: [
              'is-on-https',
              'uses-http2', 
              'csp-xss',
              'no-vulnerable-libraries',
              'external-anchors-use-rel-noopener',
              'geolocation-on-start',
              'notification-on-start',
              'no-document-write',
              'uses-passive-event-listeners'
            ]
          };
          EOF
          
          # Try security-focused Lighthouse run
          npx lighthouse http://localhost:4173/ \
            --config-path=./lighthouse-security-config.js \
            --chrome-flags="--no-sandbox --headless --disable-gpu --disable-dev-shm-usage" \
            --output=json \
            --output-path=./lighthouse-security-results.json \
            --max-wait-for-load=30000 \
            --quiet || echo "Lighthouse security audit completed with warnings"
          
          # Alternative security checks if Lighthouse fails
          if [ ! -f "./lighthouse-security-results.json" ] || [ ! -s "./lighthouse-security-results.json" ]; then
            echo "Lighthouse failed, running manual security checks..."
            
            # Check for basic security headers via curl
            echo "=== Manual Security Header Check ==="
            HEADERS=$(curl -I -s http://localhost:4173/)
            echo "$HEADERS"
            
            # Check for common security issues in static files
            echo "=== Static File Security Analysis ==="
            
            # Check for exposed sensitive files
            echo "Checking for sensitive file exposure..."
            for path in "/.env" "/config.json" "/package.json"; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4173$path)
              if [ "$STATUS" = "200" ]; then
                echo "‚ö†Ô∏è  WARNING: $path is accessible (HTTP $STATUS)"
              else
                echo "‚úÖ $path properly protected (HTTP $STATUS)"
              fi
            done
            
            # Check for XSS vulnerabilities in built assets
            echo "Checking for potential XSS in assets..."
            if find dist/ -name "*.js" -exec grep -l "eval\|Function\|innerHTML" {} \; | head -5; then
              echo "‚ö†Ô∏è  Found potentially unsafe JavaScript patterns"
            else
              echo "‚úÖ No obvious XSS patterns found"
            fi
            
            # Check for hardcoded secrets
            echo "Checking for hardcoded secrets..."
            if find dist/ -name "*.js" -exec grep -i -E "(api_key|secret|password|token)" {} \; | head -3; then
              echo "‚ö†Ô∏è  Potential hardcoded secrets found"
            else
              echo "‚úÖ No obvious hardcoded secrets found"
            fi
          fi
          
          # Try uploading results if they exist
          if [ -f "./lighthouse-security-results.json" ]; then
            echo "Uploading Lighthouse results..."
            npx @lhci/cli@0.12.x upload --target=temporary-public-storage || echo "Upload failed but security audit completed"
          else
            echo "‚úÖ Manual security audit completed successfully"
          fi

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep Security Scan
        run: |
          pip install semgrep
          semgrep --config=p/security-audit --config=p/react --config=p/typescript --config=p/secrets --sarif --output=semgrep.sarif .
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()
        continue-on-error: true

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

# CSP validation removed - already covered by security-headers-test job

  edge-function-security:
    name: Edge Function Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate Edge Function Security
        run: |
          # Check for hardcoded secrets in Edge Functions
          if grep -r "sk_live\|sk_test\|whsec_" supabase/functions/ --exclude-dir=_shared; then
            echo "‚ùå Hardcoded secrets found in Edge Functions!"
            exit 1
          fi
          
          # Check for proper npm: specifiers (exclude test/debug functions)
          HTTPS_IMPORTS=$(grep -r "from ['\"]https://" supabase/functions/ | grep -v "npm:" | grep -v "jsr:" | grep -v "test" | grep -v "debug" || true)
          if [ -n "$HTTPS_IMPORTS" ]; then
            echo "‚ùå Non-npm/jsr imports found in Edge Functions!"
            echo "$HTTPS_IMPORTS"
            exit 1
          fi
          
          # Check for proper error handling in main functions (exclude test/debug functions)
          MAIN_FUNCTIONS=$(find supabase/functions -name "index.ts" | grep -v test | grep -v debug | grep -v minimal)
          FUNCTIONS_WITH_TRY_CATCH=0
          TOTAL_FUNCTIONS=0
          
          for func in $MAIN_FUNCTIONS; do
            TOTAL_FUNCTIONS=$((TOTAL_FUNCTIONS + 1))
            if grep -q "try" "$func" && grep -q "catch" "$func"; then
              FUNCTIONS_WITH_TRY_CATCH=$((FUNCTIONS_WITH_TRY_CATCH + 1))
              echo "‚úÖ $func has error handling"
            else
              echo "‚ö†Ô∏è  $func missing error handling"
            fi
          done
          
          if [ $FUNCTIONS_WITH_TRY_CATCH -eq 0 ]; then
            echo "‚ùå No Edge Functions have proper error handling!"
            exit 1
          fi
          
          echo "‚úÖ Found error handling in $FUNCTIONS_WITH_TRY_CATCH/$TOTAL_FUNCTIONS main Edge Functions"
          
          # Check for CORS headers in main functions
          FUNCTIONS_WITH_CORS=0
          for func in $MAIN_FUNCTIONS; do
            if grep -q "Access-Control-Allow-Origin" "$func"; then
              FUNCTIONS_WITH_CORS=$((FUNCTIONS_WITH_CORS + 1))
            fi
          done
          
          if [ $FUNCTIONS_WITH_CORS -eq 0 ]; then
            echo "‚ùå No Edge Functions have CORS headers!"
            exit 1
          fi
          
          echo "‚úÖ Found CORS headers in $FUNCTIONS_WITH_CORS/$TOTAL_FUNCTIONS main Edge Functions"
          echo "‚úÖ Edge Function security checks passed"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-headers-test, dependency-scan, lighthouse-security, code-security-scan, secret-scan, edge-function-security]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          echo "# Security Audit Summary" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          # Check job results
          JOBS=("security-headers-test" "dependency-scan" "lighthouse-security" "code-security-scan" "secret-scan" "edge-function-security")
          
          # Check individual job results
          if [ "${{ needs.security-headers-test.result }}" == "success" ]; then
            echo "‚úÖ security-headers-test: PASSED" >> security-report.md
          else
            echo "‚ùå security-headers-test: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "‚úÖ dependency-scan: PASSED" >> security-report.md
          else
            echo "‚ùå dependency-scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.lighthouse-security.result }}" == "success" ]; then
            echo "‚úÖ lighthouse-security: PASSED" >> security-report.md
          else
            echo "‚ùå lighthouse-security: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.code-security-scan.result }}" == "success" ]; then
            echo "‚úÖ code-security-scan: PASSED" >> security-report.md
          else
            echo "‚ùå code-security-scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "‚úÖ secret-scan: PASSED" >> security-report.md
          else
            echo "‚ùå secret-scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.edge-function-security.result }}" == "success" ]; then
            echo "‚úÖ edge-function-security: PASSED" >> security-report.md
          else
            echo "‚ùå edge-function-security: FAILED" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Security Score" >> security-report.md
          
          # Calculate security score
          PASSED_COUNT=0
          if [ "${{ needs.security-headers-test.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          if [ "${{ needs.lighthouse-security.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          if [ "${{ needs.code-security-scan.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          if [ "${{ needs.edge-function-security.result }}" == "success" ]; then
            PASSED_COUNT=$((PASSED_COUNT + 1))
          fi
          
          SCORE=$((PASSED_COUNT * 100 / ${#JOBS[@]}))
          echo "Overall Security Score: $SCORE/100" >> security-report.md
          
          cat security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md 